	assume	adl=1

	section	.text
	public	__i48not
__i48not:
	push	bc
	call	__llnot
	pop	bc
	ret

	section	.text
	public	__i48and
__i48and:
	push	iy
	push	bc
	call	__lland
	pop	bc
	pop	iy
	ret

	section	.text
	public	__i48or
__i48or:
	push	iy
	push	bc
	call	__llor
	pop	bc
	pop	iy
	ret

	section	.text
	public	__i48xor
__i48xor:
	push	iy
	push	bc
	call	__llxor
	pop	bc
	pop	iy
	ret

	section	.text
	public	__i48shl
__i48shl:
	push	bc
	call	__llshl
	pop	bc
	ret

	section	.text
	public	__i48shru
__i48shru:
	push	bc
	ld	bc, 0
	call	__llshru
	pop	bc
	ret

	section	.text
	public	__i48shrs
__i48shrs:
	push	bc
	ex	de, hl
	push	hl
	add	hl, hl
	sbc	hl, hl
	ex	(sp), hl
	pop	bc
	ex	de, hl
	call	__llshrs
	pop	bc
	ret

	section	.text
	public	__i48cmpu
__i48cmpu:
	push	bc
	push	iy
	push	bc
	call	__llcmpu
	pop	bc
	pop	bc
	pop	bc
	ret

	section	.text
	public	__i48cmpzero
__i48cmpzero:
	push	bc
	dec	sp
	push	de
	inc	sp
	pop	bc
	call	__llcmpzero
	pop	bc
	ret

	section	.text
	public	__i48cmps
__i48cmps:
	push	hl
	lea	hl, iy
	add	hl, hl
	sbc	hl, hl
	ex	(sp), hl
	push	iy
	push	bc
	ex	de, hl
	push	hl
	add	hl, hl
	sbc	hl, hl
	ex	(sp), hl
	pop	bc
	ex	de, hl
	call	__llcmps
	pop	bc
	pop	iy
	inc	sp
	inc	sp
	inc	sp
	ret

	section	.text
	public	__i48neg
__i48neg:
	push	bc
	call	__llneg
	pop	bc
	ret

	section	.text
	public	__i48muls, __i48mulu
__i48muls:
__i48mulu:
	push	hl
	or	a, a
	sbc	hl, hl
	ex	(sp), hl
	push	iy
	push	bc
	call	__llmulu
	pop	bc
	pop	iy
	inc	sp
	inc	sp
	inc	sp
	ret

	section	.text
	public	__i48divs
__i48divs:
	push	bc
	push	hl
	lea	hl, iy
	add	hl, hl
	sbc	hl, hl
	ex	(sp), hl
	push	iy
	push	bc
	ex	de, hl
	push	hl
	add	hl, hl
	sbc	hl, hl
	ex	(sp), hl
	pop	bc
	ex	de, hl
	call	__lldivs
	pop	bc
	pop	bc
	pop	bc
	pop	bc
	ret

	section	.text
	public	__i48divu
__i48divu:
	push	bc
	push	hl
	or	a, a
	sbc	hl, hl
	ex	(sp), hl
	push	iy
	push	bc
	ld	bc, 0
	call	__lldivu
	pop	bc
	pop	bc
	pop	bc
	pop	bc
	ret

	section	.text
	public	__i48rems
__i48rems:
	push	bc
	push	hl
	lea	hl, iy
	add	hl, hl
	sbc	hl, hl
	ex	(sp), hl
	push	iy
	push	bc
	ex	de, hl
	push	hl
	add	hl, hl
	sbc	hl, hl
	ex	(sp), hl
	pop	bc
	ex	de, hl
	call	__llrems
	pop	bc
	pop	bc
	pop	bc
	pop	bc
	ret

	section	.text
	public	__i48remu
__i48remu:
	push	bc
	push	hl
	or	a, a
	sbc	hl, hl
	ex	(sp), hl
	push	iy
	push	bc
	ld	bc, 0
	call	__llremu
	pop	bc
	pop	bc
	pop	bc
	pop	bc
	ret

	section	.text
	public	__i48dvrmu
__i48dvrmu:
	push	hl
	or	a, a
	sbc	hl, hl
	ex	(sp), hl
	push	iy
	push	bc
	ld	bc, 0
	push	bc
	push	bc
	push	af
	call	__lldvrmu
	pop	af
	pop	bc
	pop	bc
	ex	(sp), hl
	pop	bc
	push	de
	pop	iy
	pop	de
	inc	sp
	inc	sp
	inc	sp
	ret

	section	.text
	public	__i48ctlz
__i48ctlz:
	push	bc
	xor	a, a
	ld	b, a
	ld	c, a
	call	__llctlz
	sub	a, 16
	pop	bc
	ret

	section	.text
	public	__i48popcnt
__i48popcnt:
	call	__lpopcnt
	dec	sp
	push	de
	inc	sp
	ex	(sp), hl
	push	af
	call	__spopcnt
	pop	hl
	add	a, h
	pop	hl
	ret

	section	.text
	public	__i48bitrev
__i48bitrev:
	call	__ibitrev
	ex	de, hl
	jp	__ibitrev

	section	.text
	public	__i48bswap
__i48bswap:
	push	bc
	call	__llbswap
	push	bc
	push	de
	push	hl
	inc	sp
	inc	sp
	pop	hl
	pop	de
	inc	sp
	pop	bc
	ret

	extern	__llnot
	extern	__lland
	extern	__llor
	extern	__llxor
	extern	__llshl
	extern	__llshru
	extern	__llshrs
	extern	__llcmpu
	extern	__llcmpzero
	extern	__llcmps
	extern	__llneg
	extern	__llmulu
	extern	__lldivs
	extern	__lldivu
	extern	__llrems
	extern	__llremu
	extern	__lldvrmu
	extern	__llctlz
	extern	__lpopcnt
	extern	__spopcnt
	extern	__ibitrev
	extern	__llbswap
